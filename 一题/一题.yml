1. 写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么?
  - 肯定是做diff用的。对比node的时候，遍历快还是map快呢？这里又可以引申出React的diff算法是怎么玩的。
  - React diff算法详解: TODO:

第 2 题：['1', '2', '3'].map(parseInt) what & why ?
  - parseInt的参数，第一个是数字，第二个是进制。一般来讲，只有像lodash、d3之类工具库，大版本之间的参数可能会有不同。还有就是公司内部自己写的工具方法，可能会调整参数。单测写好，注意一下，一般没什么大问题。

第 3 题：（挖财）什么是防抖和节流？有什么区别？如何实现？
  - 俩都是为了性能优化。一个是间隔时间内触发，前一个不执行。一个是单位时间内的多次出发只会执行一次。什么时候适合防抖、是么时候节流。比如一个input框，输入完进行搜索，肯定防抖合适；敲了100遍回车，一般来讲，节流会好一点。

第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？
  - 都是es6里新的数据结构。
  - 都是干啥的：
    - Set，一个所有值不重复的可枚举数据结构，但为什么设计个Set出来，我没有很理解，我还没碰到哪些场景一定要用Set的。也有可能是为了促进语言本身的发展和融合？毕竟java里面也有Set这个概念。 
    - Map，一个key可以为各种数据结构的对象，Object的key只能为字符串；如果用一个空对象，属性可以直接访问和设置，但Map不行。
    - WeakMap，只接受对象作为key，别的不行；作为key的对象，不计入垃圾回收。主要用来防止内存泄漏；
  - 为啥引入这些数据结构，数组不香么？对象不香么？为了解决什么问题？
    - 比如Set，用的很少。除了去重，很少用到。不过想想，已经有了_，Array为啥还要封装自己的方法呢？用得多了，就纳为标准，真香。
  - 什么场景适合这些问题？

第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？
  - 略

第 6 题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？
  - 


思考：
1. 为什么要设计箭头函数？
  - 我的理解是：让方法存粹化。老的function有太多对象的影子在里面，各种call、apply、this、argument等等...

额外收获：
- slice的参数为负数，原来是用了length的长度减去该负数，之前没见过，哈哈
- WeakRef又是什么鬼？
- clone一个函数用eval？
