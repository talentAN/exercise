1. 写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么?
  - 肯定是做diff用的。对比node的时候，遍历快还是map快呢？这里又可以引申出React的diff算法是怎么玩的。
  - React diff算法详解: TODO:

第 2 题：['1', '2', '3'].map(parseInt) what & why ?
  - parseInt的参数，第一个是数字，第二个是进制。一般来讲，只有像lodash、d3之类工具库，大版本之间的参数可能会有不同。还有就是公司内部自己写的工具方法，可能会调整参数。单测写好，注意一下，一般没什么大问题。

第 3 题：（挖财）什么是防抖和节流？有什么区别？如何实现？
  - 俩都是为了性能优化。一个是间隔时间内触发，前一个不执行。一个是单位时间内的多次出发只会执行一次。什么时候适合防抖、是么时候节流。比如一个input框，输入完进行搜索，肯定防抖合适；敲了100遍回车，一般来讲，节流会好一点。

第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？
  - 都是es6里新的数据结构。
  - 都是干啥的：
    - Set，一个所有值不重复的可枚举数据结构，但为什么设计个Set出来，我没有很理解，我还没碰到哪些场景一定要用Set的。也有可能是为了促进语言本身的发展和融合？毕竟java里面也有Set这个概念。 
    - Map，一个key可以为各种数据结构的对象，Object的key只能为字符串；如果用一个空对象，属性可以直接访问和设置，但Map不行。
    - WeakMap，只接受对象作为key，别的不行；作为key的对象，不计入垃圾回收。主要用来防止内存泄漏；
  - 为啥引入这些数据结构，数组不香么？对象不香么？为了解决什么问题？
    - 比如Set，用的很少。除了去重，很少用到。不过想想，已经有了_，Array为啥还要封装自己的方法呢？用得多了，就纳为标准，真香。
  - 什么场景适合这些问题？

第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？
  - 略

第 6 题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？
  - 略

第 7 题：ES5/ES6 的继承除了写法以外还有什么区别？
  - 暂时不纠结语法问题。

第 8 题：setTimeout、Promise、Async/Await 的区别
  - 宏任务、微任务就没什么可说的了。我们可以想想，微任务是后来才有的么？自己瞎猜的，它应该是一直存在的。setTimeout的时候，键盘事件会触发么？鼠标事件会触发么？当然会，这些事件是否可以理解为“微任务”呢？在没有Promise的年代，我们怎么做的？神奇的callback。当然我们可以自己实现一个Promise。Async和Await其实可以理解成Promise的语法糖。可以进一步聊聊浏览器的执行机制。 

第 9 题：（头条、微医）Async/Await 如何通过同步的方式实现异步
  - 略

第 11 题：（携程）算法手写题
  - 我个人的习惯，如果数据量不大，第一优先级是让同事读的懂而不是炫技，所以怎么简单怎么来；如果数据量可能太大，再考虑性能优化的事儿。

第 12 题：（滴滴、挖财、微医、海康）JS 异步解决方案的发展历程以及优缺点。
  - 有问题，才会想着解决问题；
  - callback回调地狱，我没感受过，不过肯定很苦逼；
  - Promise，挺好用，不过没办法取消；
  - generator，随时可以停止。
  - async/await，形式上和generator差不多；

第 13 题：（微医）Promise 构造函数是同步执行还是异步执行，那么then 方法呢？
  - 先明确一下，什么是同步，什么是异步。放在微任务宏任务里的，才把他们看成是异步。所以构造函数当然是同步；then之后的东西要放在微任务里，肯定异步咯。

第 14 题：（兑吧）情人节福利题，如何实现一个 new？
- 先知道new干了啥；
  - 先生成一个新的空对象；
  - 初始化参数；
  - 把prototype都引上去。
- 好吧，事实说明爸爸忘了prototype和__proto__的关系。那就让爸爸来理一理。好的爸爸理清楚了。

第 15 题：（网易）简单讲解一下http2的多路复用。
  - 先说复用，它复用的是个啥玩意。早期一个http就要用一个tcp，1.1里面弄了个keep-alive，tcp能复用了，但还是每次只能处理一个http请求。如果同时有多个怎么办？2干了几件事儿？多路复用、二进制分帧、http头压缩，都是很常规的优化手段。
  - 提到了多路复用，这只是tcp和http阶段的，其他阶段能不能干点儿事儿呢？当然能，主要你琢磨就行了。

第 16 题：谈谈你对TCP三次握手和四次挥手的理解
第 17 题：A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态
  - 详见爸爸写的文章吧；
第 18 题：（微医）React 中 setState 什么时候是同步的，什么时候是异步的？
  - 嗯... 有必要纠结么...
第 20 题：介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？
  - 让大哥哥梳理一波儿:
    1. 你得知道自己要安装啥吧？得有个dependencies, dev只是个拓展先不用管；
    2. 你得知道自己去哪里要包吧？看看自己配置的npm源头；
    3. 每个包依次安装吧？远端查询自己的依赖包的版本，以及它的相关依赖，形成一棵树；
    4. 下载压缩包，解压到对应文件夹；

    进一步，一棵树复用度太低了不是？那就检索放在第一层；
    版本不对怎么办？ lockfile了解下；
    能不能再进一步？下载能不能省？移动能不能省略？yarn pnp
第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣Object.prototype.toString.call() 、 instanceof 以及 Array.isArray()
  - Object是所有对象都有的方法，最靠谱。为啥不用toString？因为各个对象可能有自己的toString；instanceOf检查的是原型链。Array.isArray，没啥用；性能上，没怎么关注过；
第 22 题：介绍下重绘和回流（Repaint & Reflow），以及如何进行优化
  - Reflow是啥？css变了，自底向上的变动；Repaint就是计算；
  - 回流和重绘当然越少越好，从计算次数、每次计算时间，等等；
    - 计算次数：一次性更新
    - 一次计算时间：css不要嵌套太深、一些属性尽量少用getBoundingClientRect， offset，少用table，动画最好自己单独一层；transform、opacity、filters等硬件加速可用；
第 23 题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景
  - 差个中间商；有中间商啥好处，多了缓冲，少暴栈，容错率增加；
第 24 题：聊聊 Redux 和 Vuex 的设计思想
  - 一个全局变量，变动通过固定操作，操作可逆；
第 25 题：说说浏览器和 Node 事件循环的区别
  - 纠结区别的意义没那么大，现在不是统一了么... 解决方案很多，最终都是要趋同的...
第 26 题：介绍模块化发展历程
  1. 为啥要模块化？文件太大，人读不懂，拆开好懂好管理。
    - AMD、CMD，前置依赖、后置依赖有什么大区别的？不见得... 作为一个技术负责人，如果你对技术的选型无法cover掉这些小小的不同，那你是不合格的... 一帮无聊的面试官拿这些东西面试，哎...
  2. 拆开人倒是懂了，浏览器不管你啊，浏览器怎么理解直接文件？所以还是要把它合并在一起。这里涉及的就是打包。
    - 首先要合并在一起；
    - 然后要尽可能的小；复用、treeShaking... 
    - 然后es module出来了；跟require的引用方式不一致，但明显es module更符合人们的习惯不是？
第 27 题：全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？
  - 直接取啊，跟window同级呀；为啥这么搞呢？是不是跟window解耦呢？
第 28 题：cookie 和 token 都存放在 header 中，为什么不会劫持 token？
第 35 题：浏览器缓存读取规则
  - 
第 39 题：介绍下 BFC 及其应用。
第 49 题：为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？
  - 好问题，我们可以想想，埋点的目的是什么？上报信息，异步的最好，啥也别影响；
  - 为啥用图片？跨域友好；为啥gif，因为小啊；
第 50 题：（百度）实现 (5).add(3).minus(2) 功能。
  - 爸爸没想起来Object.valueOf
第 52 题：怎么让一个 div 水平垂直居中？
  - Layout还得刷一遍；
第 56 题：要求设计 LazyMan 类，实现以下功能。
  - 别说，爸爸不自己写一次，还真没发现里面的一些坑
第 57 题：分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。
  - opacity可以硬件加速，visibility不改dom树，display不增加dom，快；
  - 好吧，爸爸的确没注意visibility不能点击，opacity可以；visibility子节点可以自己猫头，opacity不行。
第 58 题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？
  - 这不就爸爸之前说的么。箭头函数存粹啊，什么call、apply、argument、原型链，统统滚蛋吧。
第 60 题：已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。
  - 爸爸第一反应是加个father盖住它，然后想想加个max-width也行，scale到是真没想过。
第 61 题：介绍下如何实现 token 加密
  - 为啥要加密？你登录了，我知道你登录了，后面我怎么知道一直是你，不是谁偷了你的信息来登录呢？给你个凭证，每次把凭证吐给我。
第 70 题： 介绍下 webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的
  - 三个阶段不会少：watch file， 重新编译模块，socket通知刷新
第 79 题：input 搜索如何防抖，如何处理中文输入
  - 不是做到这道题，爸爸还真是不知道onCompositionStart这个事件
思考:
1. 为什么要设计箭头函数？
  - 我的理解是：让方法存粹化。老的function有太多对象的影子在里面，各种call、apply、this、argument等等...

额外收获:
- slice的参数为负数，原来是用了length的长度减去该负数，之前没见过，哈哈
- WeakRef又是什么鬼？
- clone一个函数用eval？
- 迭代器和生成器，还没专门了解下。
- TODO: 
  1. React工作原理
  2. 渲染引擎Layout、paint计算机制；
  3. BFC, IFC，盒子模型
  4. 手写Promise